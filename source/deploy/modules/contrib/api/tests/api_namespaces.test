<?php

/**
 * @file
 * Tests that namespace functionality works.
 */

module_load_include('php', 'api', 'tests/api_test_case');

/**
 * Tests that namespace and YAML functionality works.
 */
class ApiNamespacesTestCase extends ApiWebPagesBaseTest {
  public static function getInfo() {
    return array(
      'name' => 'Namespaces',
      'description' => 'Tests that namespaces and YAML work properly.',
      'group' => 'API module',
    );
  }

  function setUp() {
    $this->baseSetUp();

    // Set up a files branch for the namespaces files.
    $this->branch_info = $this->setUpBranchUI('', TRUE, array('directory' => drupal_get_path('module', 'api') . '/tests/sample_namespace', 'excluded' => ''));

    // We don't need the PHP branch for this test, so for speed, remove it.
    $this->removePHPBranch();

    // Parse the code.
    $this->resetBranchesAndCache();
    $this->updateBranches();
    $this->processApiParseQueue();
  }

  /**
   * Tests that the namespace pages work fine.
   */
  function testNamespacePages() {
    $this->drupalGet('api/' . $this->branch_info['project'] . '/namespaces');

    $this->assertLink('api\\test1', 0, 'First namespace link is there');
    $this->assertLink('api\\test2', 0, 'Second namespace link is there');

    $this->clickLink('api\\test1');
    $this->assertLink('ClassA', 0, 'ClassA is on first namespace page');
    $this->assertLink('InterfaceD', 0, 'InterfaceD is on first namespace page');
    $this->assertText('InterfaceD.php', 'Right InterfaceD file is on first namespace page');
    $this->assertNoLink('ClassB', 'ClassB is not on first namespace page');
    $this->assertText('Sample class in a namespace.', 'ClassA description is on first namespace page');

    $this->clickLink('ClassA');
    $this->assertText('Namespace', 'Namespace header is on class page');
    $this->assertLink('api\\test1', 0, 'Namespace link is on class page');
    // Test linking in docs to some functions etc.
    $this->assertLink('MyClassB::bMethod', 0, 'Link to aliased class method is made');
    $this->assertLink('another_function', 0, 'Link to non namespaced function is made');
    $this->assertLink('InterfaceD::dMethod', 0, 'Link to interface method in same namespace is made');

    $this->clickLink('api\\test1');
    $this->assertLink('InterfaceD', 0, 'Link went back to namespace page');

    $this->drupalGet('api/' . $this->branch_info['project'] . '/namespaces');
    $this->clickLink('api\\test2');
    $this->assertLink('ClassB', 0, 'ClassB is on second namespace page');
    $this->assertLink('ClassE', 0, 'ClassE is on second namespace page');
    $this->assertLink('InterfaceC', 0, 'InterfaceE is on second namespace page');
    $this->assertLink('InterfaceD', 0, 'InterfaceD is on second namespace page');
    $this->assertText('InterfaceD2.php', 'Right InterfaceD file is on second namespace page');
    $this->assertNoLink('ClassA', 'ClassA is not on second namespace page');

    $this->drupalGet('api/' . $this->branch_info['project'] . '/ClassA.php');
    $this->assertText('Namespace', 'Namespace header is on file page');
    $this->assertLink('api\\test1', 0, 'Namespace link is on file page');
    $this->clickLink('api\\test1');
    $this->assertLink('InterfaceD', 0, 'Link went back to namespace page');

    $this->drupalGet('api/' . $this->branch_info['project'] . '/no_namespace.php');
    $this->assertNoText('Namespace', 'Namespace header is not on non-namespaced file page');
    $this->assertNoLink('api\\test1', 'Namespace link is not on non-namespaced file page');
    $this->assertNoLink('api\\test2', 'Namespace link is not on non-namespaced file page');
    $this->clickLink('ClassQ');
    $this->assertNoText('Namespace', 'Namespace header is not on non-namespaced class page');
    $this->assertNoLink('api\\test1', 'Namespace link is not on non-namespaced class page');
    $this->assertNoLink('api\\test2', 'Namespace link is not on non-namespaced class page');

    // Test use references.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/ClassB.php/class/ClassB');
    $this->assertText('1 file declares its use of ClassB', 'Reference text is on class page');
    $this->assertLink('ClassA.php', 0, 'Link to file using class is present');
  }

  /**
   * Tests that YAML works properly for linking and references.
   */
  function testYaml() {
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.yml');

    // Verify that the page name is correct.
    $this->assertTitleContains('sample.yml', 'Page title is correct');

    // Verify the links to referenced functions and methods.
    $this->assertLinkURLSubstring('\api\test1\ClassA::cMethod', $this->branch_info['project'] . '/ClassA.php/function/ClassA', 'cMethod link exists', 'cMethod link went to the right place');
    $this->assertLinkURLSubstring('\api\test1\ClassA::dMethod', $this->branch_info['project'] . '/ClassA.php/function/ClassA', 'dMethod link exists', 'dMethod link went to the right place');
    $this->assertLinkURLSubstring('another_function', $this->branch_info['project'] . '/no_namespace.php/function/another_function', 'another_function link exists', 'another_function link went to the right place');

    // Verify the references on the linked functions.
    $this->clickLink('another_function');
    $this->assertText("1 string reference to 'another_function'", 'Reference text is there');
    $this->assertLink('sample.yml', 0, 'Referenced file is linked');
    $this->clickLink('sample.yml');

    $this->clickLink('\api\test1\ClassA::cMethod');
    $this->assertText("1 string reference to 'ClassA::cMethod'", 'Reference text is there');
    $this->assertLink('sample.yml', 0, 'Referenced file is linked');
    $this->clickLink('sample.yml');

    $this->clickLink('\api\test1\ClassA::dMethod');
    $this->assertText("1 string reference to 'ClassA::dMethod'", 'Reference text is there');
    $this->assertLink('sample.yml', 0, 'Referenced file is linked');
    $this->clickLink('sample.yml');
  }
}

/**
 * Tests that namespace-related cruft in API module is removed appropriately.
 */
class ApiNamespaceCruftTestCase extends ApiWebPagesBaseTest {
  public static function getInfo() {
    return array(
      'name' => 'Namespace cruft removal',
      'description' => 'Tests that data stored by the API module is removed when appropriate, with namespaces included.',
      'group' => 'API module',
    );
  }

  function setUp() {
    $this->baseSetUp();

    // Set up a new super-user.
    $this->super_user = $this->drupalCreateUser(array(
      'access API reference',
      'administer API reference',
      'access content',
      'access administration pages',
      'administer blocks',
      'administer nodes',
      'access site reports',
      'access comments',
      'post comments',
      'skip comment approval',
    ));

    $this->drupalLogin($this->super_user);

    // Set up comment settings.
    $this->drupalPost('admin/config/development/api/comments', array(
        'comment' => 2,
      ), t('Save comment settings'));

    // We don't need the PHP branch for this test, so for speed, remove it.
    $this->removePHPBranch();

    // Add one node to the database.
    $this->drupalCreateNode();
  }

  /**
   * Tests that cruft is removed appropriately.
   */
  function testCruftRemoval() {
    $counts = array(
      'api_project' => 0,
      'api_branch' => 0,
      'api_php_branch' => 0,
      'api_documentation' => 0,
      'api_php_documentation' => 0,
      'api_function' => 0,
      'api_members' => 0,
      'api_overrides' => 0,
      'api_extends' => 0,
      'api_file' => 0,
      'api_namespace' => 0,
      'node' => 1,
      'comment' => 0,
    );
    $this->verifyCounts($counts, 0, 'No branches');

    // Add a branch for the namespace test files.
    $this->branch_info = $this->setUpBranchUI('', TRUE, array('directory' => drupal_get_path('module', 'api') . '/tests/sample_namespace', 'excluded' => ''));

    $counts['api_project'] = 1;
    $counts['api_branch'] = 1;
    $this->resetBranchesAndCache();
    $this->verifyCounts($counts, 0, 'Branch added');

    // Run the branch update function and verify counts. There should be
    // records for each file.
    $this->updateBranches();
    $counts['node'] = 9;
    $counts['api_documentation'] = 8;
    $counts['api_file'] = 8;
    $this->verifyCounts($counts, 8, 'Add and update branch');

    // Parse everything and verify counts.
    $this->checkAndClearLog();
    $this->updateBranches();
    $this->processApiParseQueue();
    $counts['node'] = 27;
    $counts['api_documentation'] = 26;
    $counts['api_function'] = 11;
    $counts['api_file'] = 8;
    $counts['api_members'] = 11;
    $counts['api_overrides'] = 10;
    $counts['api_extends'] = 1;
    $counts['api_namespace'] = 8;
    $this->verifyCounts($counts, 0, 'Parse the branch');

    // Delete the branch, and verify counts.
    $default_branch = api_get_branch_by_id();
    $this->drupalPost('admin/config/development/api/branches/' . $default_branch->branch_id . '/delete', array(), t('Delete'));
    $this->resetBranchesAndCache();
    $counts['api_branch'] = 0;
    $counts['api_file'] = 0;
    $counts['api_documentation'] = 0;
    $counts['api_function'] = 0;
    $counts['node'] = 1;
    $counts['api_members'] = 0;
    $counts['api_overrides'] = 0;
    $counts['api_extends'] = 0;
    $counts['api_namespace'] = 0;
    $this->verifyCounts($counts, 0, 'Branch deleted');

    // Delete the project and verify counts.
    $this->drupalPost('admin/config/development/api/projects/' . $default_branch->project . '/delete', array(), t('Delete'));
    $counts['api_project'] = 0;
    $this->verifyCounts($counts, 0, 'Project deleted');
  }
}
